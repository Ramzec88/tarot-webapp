// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å n8n API –≤ script.js

// ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò AI-–ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø =====
async function generateAIPredictionToContainer(containerId, type, card, question = '') {
    const container = document.getElementById(containerId);
    if (!container) return '';
    
    const aiBlock = document.createElement('div');
    aiBlock.className = 'ai-prediction';
    aiBlock.innerHTML = `
        <div class="ai-header">
            <div class="ai-icon">ü§ñ</div>
            <div class="ai-title">–ò–ò-—Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ</div>
        </div>
        <div class="ai-content">
            <div class="generating-text">–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ...</div>
        </div>
    `;
    
    container.appendChild(aiBlock);
    
    try {
        let prediction = '';
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º POST –∑–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏
        if (typeof API_CONFIG !== 'undefined' && API_CONFIG.primary && API_CONFIG.primary.generatePrediction) {
            
            const requestData = {
                type: type,
                card: {
                    name: card.name,
                    symbol: card.symbol,
                    meaning: card.meaning,
                    image: card.image || ''
                },
                question: question || '',
                userName: userName || '–ì–æ—Å—Ç—å',
                userBirthdate: userBirthdate || '',
                timestamp: new Date().toISOString(),
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                requestId: Date.now(),
                clientInfo: {
                    userAgent: navigator.userAgent,
                    language: navigator.language
                }
            };

            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –≤ n8n:', requestData);

            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 —Å–µ–∫—É–Ω–¥

            const response = await fetch(API_CONFIG.primary.generatePrediction, {
                method: 'POST', // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º POST –≤–º–µ—Å—Ç–æ GET
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    'Cache-Control': 'no-cache',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify(requestData),
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}, statusText: ${response.statusText}`);
            }

            const responseText = await response.text();
            console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç n8n (raw):', responseText);

            let result;
            try {
                result = JSON.parse(responseText);
            } catch (parseError) {
                console.warn('‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç:', responseText);
                // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –≥–æ—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                result = { prediction: responseText };
            }

            prediction = result.prediction || result.response || result.message || responseText || "–ö–∞—Ä—Ç—ã –º–æ–ª—á–∞—Ç —Å–µ–≥–æ–¥–Ω—è...";
            
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç –ò–ò:', prediction);

        } else {
            console.warn('‚ö†Ô∏è API_CONFIG –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é');
            prediction = generatePredictionText(type, card, question);
        }
       
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–µ—á–∞—Ç–∏ —Ç–µ–∫—Å—Ç–∞
        setTimeout(() => {
            const aiContent = aiBlock.querySelector('.ai-content');
            if (aiContent) {
                typeWriter(aiContent, prediction, 30); // –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è
            }
        }, 2000); 
        
        return prediction;
       
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:', error);
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò';
        
        if (error.name === 'AbortError') {
            errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò';
        } else if (error.message.includes('Failed to fetch')) {
            errorMessage = '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ò–ò';
        } else if (error.message.includes('404')) {
            errorMessage = '–≠–Ω–¥–ø–æ–∏–Ω—Ç –ò–ò –Ω–µ –Ω–∞–π–¥–µ–Ω';
        } else if (error.message.includes('CORS')) {
            errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏';
        }
        
        console.warn('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏:', errorMessage);
        
        // –§–æ–ª–ª–±—ç–∫ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
        const prediction = generatePredictionText(type, card, question);
        setTimeout(() => {
            const aiContent = aiBlock.querySelector('.ai-content');
            if (aiContent) {
                typeWriter(aiContent, prediction, 50);
            }
        }, 2000); 
        return prediction;
    }
}

// ===== –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–• API –ó–ê–ü–†–û–°–û–í =====
async function makeSecureAPIRequest(endpoint, data, options = {}) {
    const defaultOptions = {
        timeout: 30000,
        retries: 2,
        retryDelay: 2000
    };
    
    const config = { ...defaultOptions, ...options };
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    let url;
    if (typeof API_CONFIG !== 'undefined' && API_CONFIG.primary && API_CONFIG.primary[endpoint]) {
        url = API_CONFIG.primary[endpoint];
    } else {
        throw new Error(`–≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–¥–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    async function attemptRequest(attemptNumber) {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), config.timeout);
        
        try {
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attemptNumber}: ${endpoint}`);
            
            const response = await fetch(url, {
                method: 'POST', // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º POST –¥–ª—è n8n webhooks
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'Cache-Control': 'no-cache'
                },
                body: JSON.stringify({
                    ...data,
                    timestamp: new Date().toISOString(),
                    requestId: Date.now() + '_' + attemptNumber
                }),
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const responseText = await response.text();
            
            try {
                return JSON.parse(responseText);
            } catch {
                return { success: true, data: responseText };
            }
            
        } catch (error) {
            clearTimeout(timeoutId);
            
            if (attemptNumber < config.retries) {
                console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attemptNumber} –Ω–µ—É–¥–∞—á–Ω–∞, –ø–æ–≤—Ç–æ—Ä—è—é —á–µ—Ä–µ–∑ ${config.retryDelay}–º—Å:`, error.message);
                await new Promise(resolve => setTimeout(resolve, config.retryDelay));
                return attemptRequest(attemptNumber + 1);
            } else {
                throw error;
            }
        }
    }
    
    return attemptRequest(1);
}

// ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• =====

async function saveDailyCardToSupabase(card) {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è:', card.name);
    
    try {
        const result = await makeSecureAPIRequest('saveDailyCard', {
            user_id: currentUser?.telegram_id || 'anonymous',
            card_name: card.name,
            card_symbol: card.symbol,
            card_meaning: card.meaning,
            card_image: card.image || '',
            drawn_date: new Date().toISOString().split('T')[0],
            user_info: {
                username: currentUser?.username || '',
                first_name: currentUser?.first_name || ''
            }
        });
        
        console.log('‚úÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', result);
        return result;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
        return null;
    }
}

async function saveQuestionToSupabase(question, isFollowUp) {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞:', question);
    
    try {
        const result = await makeSecureAPIRequest('saveQuestion', {
            user_id: currentUser?.telegram_id || 'anonymous',
            question_text: question,
            is_follow_up: isFollowUp,
            user_info: {
                username: currentUser?.username || '',
                first_name: currentUser?.first_name || '',
                display_name: userName || ''
            }
        });
        
        console.log('‚úÖ –í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', result);
        return result;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞:', error);
        return { id: Date.now() }; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π ID –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    }
}

async function saveAnswerToSupabase(questionId, card, aiPrediction) {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:', questionId);
    
    try {
        const result = await makeSecureAPIRequest('saveAnswer', {
            question_id: questionId,
            user_id: currentUser?.telegram_id || 'anonymous',
            card_name: card.name,
            card_symbol: card.symbol,
            card_meaning: card.meaning,
            card_image: card.image || '',
            ai_prediction: aiPrediction,
            user_info: {
                username: currentUser?.username || '',
                first_name: currentUser?.first_name || ''
            }
        });
        
        console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', result);
        return result;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:', error);
        return null;
    }
}

async function updateUserQuestionsInSupabase() {
    console.log('üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:', questionsLeft);
    
    try {
        const result = await makeSecureAPIRequest('updateSubscription', {
            user_id: currentUser?.telegram_id || 'anonymous',
            free_questions_left: questionsLeft,
            action: 'update_questions'
        });
        
        console.log('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', result);
        return result;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:', error);
        return null;
    }
}

// ===== –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø =====
async function testN8NConnection() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ n8n...');
        
        const testData = {
            type: 'connection_test',
            message: '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç Telegram Web App',
            timestamp: new Date().toISOString(),
            user_agent: navigator.userAgent
        };
        
        const result = await makeSecureAPIRequest('generatePrediction', testData);
        console.log('‚úÖ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω:', result);
        return true;
        
    } catch (error) {
        console.error('‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–µ–Ω:', error);
        return false;
    }
}

// ===== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–õ–ê–î–ö–ò =====
function enableAPIDebugging() {
    // –í–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    window.apiDebug = true;
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ fetch –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const originalFetch = window.fetch;
    window.fetch = function(...args) {
        if (window.apiDebug) {
            console.log('üåê Fetch –∑–∞–ø—Ä–æ—Å:', args);
        }
        return originalFetch.apply(this, args).then(response => {
            if (window.apiDebug) {
                console.log('üì• Fetch –æ—Ç–≤–µ—Ç:', response.status, response.statusText);
            }
            return response;
        }).catch(error => {
            if (window.apiDebug) {
                console.error('‚ùå Fetch –æ—à–∏–±–∫–∞:', error);
            }
            throw error;
        });
    };
    
    console.log('üîç API –æ—Ç–ª–∞–¥–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞');
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–∫–∏ –≤ development —Ä–µ–∂–∏–º–µ
if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
    enableAPIDebugging();
}